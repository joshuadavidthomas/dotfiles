#!/usr/bin/env bash

set -oue pipefail

source "$(dirname "$0")/../utils"

if ! command -v gum &>/dev/null; then
        distro=$(get_distro)
        case "$distro" in
        arch)
                yay -S --noconfirm gum
                ;;
        aurora | fedora)
                if command -v brew &>/dev/null; then
                        brew install gum
                else
                        sudo dnf copr enable -y charmbracelet/charm
                        sudo dnf install -y gum
                fi
                ;;
        *)
                echo "Warning: Cannot auto-install gum for distro: $distro"
                echo "Please install gum manually: https://github.com/charmbracelet/gum"
                exit 1
                ;;
        esac
fi

echo
gum style --foreground="#00d1b2" --bold --border double --padding "1 2" "Secret Collection"
echo "Loading secrets from 1Password..."
echo

if command -v op &>/dev/null; then
        if ! op account list &>/dev/null; then
                echo "1Password CLI is not configured. Let's set it up..."

                SIGNIN_ADDRESS=$(gum input --placeholder "Sign-in address (e.g., my.1password.com)" --width 60)
                EMAIL=$(gum input --placeholder "Email address" --width 60)

                if [[ -n "$SIGNIN_ADDRESS" ]] && [[ -n "$EMAIL" ]]; then
                        echo "Now running 'op account add' - you'll be prompted for your Secret Key and Master Password..."
                        op account add --address "$SIGNIN_ADDRESS" --email "$EMAIL"

                        eval $(op signin)
                else
                        echo "⚠ Skipping 1Password setup - sign-in address and email required"
                fi
        else
                if ! op vault list &>/dev/null 2>&1; then
                        echo "1Password account found but not signed in. Signing in..."
                        eval $(op signin)
                fi
        fi
        echo "✓ 1Password CLI configured and signed in"
        echo
fi

if command -v op &>/dev/null; then
        gum style --foreground="#00d1b2" --bold "Loading Wakatime Configuration from 1Password"

        WAKATIME_BASE_OP_URI="op://Private/Wakapi"
        export WAKATIME_API_KEY=$(op read "$WAKATIME_BASE_OP_URI/api key" 2>/dev/null || echo "")

        echo "✓ Wakatime API key loaded from 1Password"
        echo
fi

if command -v atuin &>/dev/null && atuin status &>/dev/null && atuin status 2>&1 | grep -q "Username:"; then
        echo "✓ Atuin already logged in"
else
        if command -v op &>/dev/null; then
                gum style --foreground="#00d1b2" --bold "Loading Atuin Configuration from 1Password"

                ATUIN_BASE_OP_URI="op://Dunbrook Web/Atuin"
                export ATUIN_PASSWORD=$(op read "$ATUIN_BASE_OP_URI/password" 2>/dev/null || echo "")
                export ATUIN_KEY=$(op read "$ATUIN_BASE_OP_URI/key" 2>/dev/null || echo "")

                echo "✓ Atuin credentials loaded from 1Password"
        fi
fi
echo

if command -v op &>/dev/null; then
        gum style --foreground="#00d1b2" --bold "Loading Cloudflare R2 Configuration from 1Password"

        R2_BASE_OP_URI="op://Private/rclone - R2 Token"
        export R2_ACCESS_KEY_ID=$(op read "$R2_BASE_OP_URI/access key id" 2>/dev/null || echo "")
        export R2_SECRET_ACCESS_KEY=$(op read "$R2_BASE_OP_URI/secret access key" 2>/dev/null || echo "")
        export R2_ENDPOINT=$(op read "$R2_BASE_OP_URI/endpoint" 2>/dev/null || echo "")

        echo "✓ Cloudflare R2 credentials loaded from 1Password"
        echo
fi

echo "✓ Secret collection complete"
echo
