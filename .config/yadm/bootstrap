#!/usr/bin/env bash

set -oue pipefail

readonly BOOTSTRAP_BASE="${BASH_SOURCE[0]}.d"

get_distro() {
        if [[ -f /etc/os-release ]]; then
                source /etc/os-release
                echo "${ID:-unknown}" | tr '[:upper:]' '[:lower:]'
        else
                echo "unknown"
        fi
}

find_scripts() {
        local dir="$1"
        if [[ -d "$dir" ]]; then
                find -L "$dir" -type f -executable -print0 | grep -zv '##\|~$' || true
        fi
}

collect_scripts() {
        local distro="$1"
        local script_dirs=(
                "$BOOTSTRAP_BASE/common"
                "$BOOTSTRAP_BASE/$distro"
        )

        local scripts=()

        for dir in "${script_dirs[@]}"; do
                while IFS= read -r -d '' script; do
                        [[ -n "$script" ]] && scripts+=("$script")
                done < <(find_scripts "$dir")
        done

        printf '%s\n' "${scripts[@]}"
}

run_script() {
        local script="$1"
        local script_name=$(basename "$script")
        local script_dir=$(basename "$(dirname "$script")")

        echo "Running: $script_name from $script_dir/"
        if ! "$script"; then
                echo "Error: bootstrap '$script' failed" >&2
                return 1
        fi
}

cd "$HOME" || exit 1

yadm gitconfig core.sparseCheckout true
yadm sparse-checkout set \
        '/*' \
        '!.github/' \
        '!LICENSE' \
        '!README.md' \
        '!install'

distro=$(get_distro)
echo "Detected distro: $distro"

if [[ ! -d "$BOOTSTRAP_BASE" ]]; then
        echo "Error: bootstrap directory '$BOOTSTRAP_BASE' not found" >&2
        exit 1
fi

scripts=$(collect_scripts "$distro" | sort -t/ -k4)

if [[ -z "$scripts" ]]; then
        echo "Warning: No bootstrap scripts found for distro: $distro" >&2
else
        local count=$(echo "$scripts" | wc -l)
        echo "Found $count bootstrap scripts to execute"

        # Execute each script
        while IFS= read -r script; do
                run_script "$script" || exit 1
        done <<<"$scripts"
fi

read -rp "Do you want to reboot now? (y/n): " confirm
if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        echo "Rebooting now..."
        systemctl reboot
fi
